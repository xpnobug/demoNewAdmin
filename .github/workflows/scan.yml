name: Scan # 定义工作流的名称为“Scan”

on:
  push:
    branches:
      - master # 当推送到 dev 分支时触发工作流
  pull_request:
    branches:
      - master # 当有 pull request 指向 dev 分支时触发工作流

jobs:
  sonar-scan: # 定义一个名为“sonar-scan”的作业
    runs-on: ubuntu-latest # 指定作业运行在最新的 Ubuntu 环境中

    strategy:
      matrix:
        jdk-version:
          - 17 # 使用 JDK 版本 17

    steps: # 定义作业的步骤
      - name: Checkout # 第一步：检出代码
        uses: actions/checkout@v4 # 使用 actions/checkout@v4 动作来检出代码
        with:
          fetch-depth: 0 # 检出完整的 git 历史

      - name: Setup Java # 第二步：设置 Java 环境
        uses: actions/setup-java@v4 # 使用 actions/setup-java@v4 动作来设置 Java 环境
        with:
          distribution: "adopt" # 使用 AdoptOpenJDK 发行版
          java-version: ${{ matrix.jdk-version }} # 设置 Java 版本为矩阵中定义的版本
          cache: "maven" # 启用 Maven 缓存

      - name: Cache SonarCloud packages # 第三步：缓存 SonarCloud 包
        uses: actions/cache@v3 # 使用 actions/cache@v3 动作来缓存
        with:
          path: ~/.sonar/cache # 缓存路径
          key: ${{ runner.os }}-sonar # 缓存键
          restore-keys: ${{ runner.os }}-sonar # 恢复键

      - name: Cache Maven packages # 第四步：缓存 Maven 包
        uses: actions/cache@v3 # 使用 actions/cache@v3 动作来缓存
        with:
          path: ~/.m2 # 缓存路径
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }} # 缓存键，基于操作系统和 pom.xml 文件的哈希值
          restore-keys: ${{ runner.os }}-m2 # 恢复键

      - name: Analyze # 第五步：执行代码分析
        run: |
          sed -i.bak '/<repositories>/,/<\/repositories>/d' pom.xml
          sed -i.bak '/<pluginRepositories>/,/<\/pluginRepositories>/d' pom.xml
          mvn -B verify -Psonar
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }} # 用于访问 GitHub 公关信息
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # 用于 SonarCloud 认证
